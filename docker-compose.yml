version: '3.8'

services:
  # Prometheus - Metrics Collection and Storage
  prometheus:
    image: prom/prometheus:latest
    container_name: observability-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - observability

  # Grafana - Visualization and Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: observability-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - observability

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: observability-jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - observability

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: observability-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./config/otelcol.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317"  # OTLP gRPC receiver
      - "4318:4318"  # OTLP HTTP receiver
      - "8889:8889"  # Prometheus metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - observability

  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: observability-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - observability

  # Fluentd - Log Collection
  fluentd:
    build: ./services/fluentd
    container_name: observability-fluentd
    volumes:
      - ./config/fluent.conf:/fluentd/etc/fluent.conf
      - /var/log:/var/log:ro
    ports:
      - "24224:24224"
    depends_on:
      - elasticsearch
    networks:
      - observability

  # Qdrant - Vector Database for AI
  qdrant:
    image: qdrant/qdrant:latest
    container_name: observability-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - observability

  # AI Processing Service
  ai-processor:
    build: ./services/ai-processor
    container_name: observability-ai-processor
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JAEGER_URL=http://jaeger:16686
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./config/ai-config.yml:/app/config.yml
    depends_on:
      - prometheus
      - elasticsearch
      - jaeger
      - qdrant
    networks:
      - observability

  # Chat API Backend
  chat-api:
    build: ./services/chat-api
    container_name: observability-chat-api
    ports:
      - "8000:8000"
    environment:
      - AI_PROCESSOR_URL=http://ai-processor:5000
      - PROMETHEUS_URL=http://prometheus:9090
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JAEGER_URL=http://jaeger:16686
    depends_on:
      - ai-processor
    networks:
      - observability

  # Frontend Chat Interface
  chat-frontend:
    build: ./services/chat-frontend
    container_name: observability-chat-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - chat-api
    networks:
      - observability

  # Sample Application for Demo
  sample-app:
    build: ./services/sample-app
    container_name: observability-sample-app
    ports:
      - "8080:8080"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=sample-app
    depends_on:
      - otel-collector
    networks:
      - observability

networks:
  observability:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  qdrant_data: